<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Miles Drake&#39;s CodeClan Homework</title>
    <link>/</link>
    <description>Recent content on Miles Drake&#39;s CodeClan Homework</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 05 May 2016 21:48:51 -0700</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Confidence Intervals Minilab</title>
      <link>/week-06/day-3/confidence-intervals-minilab/</link>
      <pubDate>Wed, 01 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-06/day-3/confidence-intervals-minilab/</guid>
      <description>library(infer)library(janitor)library(tidyverse)Data SetThe data set used for this exercise, ames.csv, explores the prices and condition of houses sold in in Ames, Iowa over a number of years.
ames &amp;lt;- read_csv(&amp;quot;data/ames.csv&amp;quot;) %&amp;gt;% clean_names()glimpse(ames)## Observations: 2,930## Variables: 82## $ order &amp;lt;dbl&amp;gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, ...## $ pid &amp;lt;dbl&amp;gt; 526301100, 526350040, 526351010, 526353030, 5271050.</description>
    </item>
    
    <item>
      <title>Probability</title>
      <link>/week-06/day-1/probability/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-06/day-1/probability/</guid>
      <description>library(gtools)library(prob)library(tidyverse)Question 1If I roll a six-sided dice once, what is the probability of getting a number less than 5?
d6_lt5 &amp;lt;- rolldie(1) %&amp;gt;% filter(X1 &amp;lt; 5)nrow(d6_lt5)/nrow(rolldie(1))## [1] 0.6666667Question 2How many outcomes are there in the sample space of an experiment in which we toss three dice?
nrow(rolldie(3))## [1] 216Question 3In an experiment where we roll four dice:</description>
    </item>
    
    <item>
      <title>dplyr Homework</title>
      <link>/week-03/day-1/1-dplyr/</link>
      <pubDate>Mon, 09 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-03/day-1/1-dplyr/</guid>
      <description>library(tidyverse)MVPdrinks &amp;lt;- read_csv(&amp;quot;data/starbucks_drinkMenu_expanded.csv&amp;quot;)head(drinks, 5)## # A tibble: 5 x 18## Beverage_catego~ Beverage Beverage_prep Calories `Total Fat (g)`## &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; ## 1 Coffee Brewed ~ Short 3 0.1 ## 2 Coffee Brewed ~ Tall 4 0.1 ## 3 Coffee Brewed ~ Grande 5 0.1 ## 4 Coffee Brewed ~ Venti 5 0.1 ## 5 Classic Espress~ Caffè L~ Short Nonfat~ 70 0.</description>
    </item>
    
    <item>
      <title>Connecting to Remote Databases in R</title>
      <link>/week-02/day-2/connecting-to-remote-databases/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-02/day-2/connecting-to-remote-databases/</guid>
      <description>library(keyring)library(RPostgreSQL)MVPLocal PostgreSQL Connectionskeyring_unlock(&amp;quot;local&amp;quot;)local_db &amp;lt;- dbConnect(drv = PostgreSQL(),user = key_get(&amp;quot;postgresql_username&amp;quot;, keyring = &amp;quot;local&amp;quot;),password = key_get(&amp;quot;postgresql_password&amp;quot;, keyring = &amp;quot;local&amp;quot;),dbname = &amp;quot;wrestling&amp;quot;,host = &amp;quot;localhost&amp;quot;)keyring_lock(&amp;quot;local&amp;quot;)List of WrestlersdbGetQuery(local_db,&amp;quot;SELECT * FROM wrestlers&amp;quot;)Data Typesid: intborn: chrname: chrgender: chrwin_percent: dbltotal_matches: intRemote PostgreSQL Connectionskeyring_unlock(&amp;quot;remote&amp;quot;)PostgreSQL(max.con = 2) # Set maximum simultaneous connections to 2remote_db &amp;lt;- dbConnect(drv = PostgreSQL(),user = key_get(&amp;quot;wrestling_username&amp;quot;, keyring = &amp;quot;remote&amp;quot;),password = key_get(&amp;quot;wrestling_password&amp;quot;, keyring = &amp;quot;remote&amp;quot;),dbname = &amp;quot;mvhbdgdk&amp;quot;,host = &amp;quot;manny.</description>
    </item>
    
    <item>
      <title>Reading in Data</title>
      <link>/week-02/day-1/reading-in-data/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-02/day-1/reading-in-data/</guid>
      <description>MVPstate_income_data &amp;lt;- read_csv(&amp;quot;data/state_income_data.csv&amp;quot;)To specify column names, apply the argument col_names to the function read_csv.
If col_names is a character vector, the values will be used as the names of the columns, and the first row of the input will be read into the first row of the output data frame.
cars &amp;lt;- read_csv(&amp;quot;data/cars.csv&amp;quot;, col_types = &amp;quot;cddddl&amp;quot;)The scotland dataset has leading whitespace that needs to be trimmed from each element.</description>
    </item>
    
    <item>
      <title>Conditionals, Functions, and Loops</title>
      <link>/week-01/day-5/conditionals-functions-loops/</link>
      <pubDate>Fri, 28 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-01/day-5/conditionals-functions-loops/</guid>
      <description>MVPif Statements and FunctionsAlgebram15a4 &amp;lt;- function(input) {output &amp;lt;- input * 15output &amp;lt;- output + 4return(output)}m15a4(1:10)## [1] 19 34 49 64 79 94 109 124 139 154Thought Exercise: Verbose OutputThe following just tests an idea I had about making a function give a “verbose” output. If a user wants to see what function m15a4 is doing to the input to reach the output, they can use m15a4_verbose(x, verbose = TRUE) to get a character output similar to an algebraic expression.</description>
    </item>
    
    <item>
      <title>Best Practice</title>
      <link>/week-01/day-3/1-best-practice/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-01/day-3/1-best-practice/</guid>
      <description>InitialisationCall libraries first.
TidyverseRead the tidyverse style guide. CodeClan’s preference is snake_case.
# Use snake case for variable namesmy_variable &amp;lt;- 0my_data &amp;lt;- read.csv(&amp;quot;file&amp;quot;)big_function(something = &amp;quot;that&amp;quot;,requires = &amp;quot;many&amp;quot;,arguments = &amp;quot;yo&amp;quot;)StylerStyler can be accessed through the Addins menu.
</description>
    </item>
    
    <item>
      <title>Errors</title>
      <link>/week-01/day-3/2-conflicts/</link>
      <pubDate>Wed, 26 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-01/day-3/2-conflicts/</guid>
      <description>select(mtcars, &amp;quot;mpg&amp;quot;)dplyr::select(mtcars, &amp;quot;mpg&amp;quot;)</description>
    </item>
    
    <item>
      <title>Data Types</title>
      <link>/week-01/day-2/data-types/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>/week-01/day-2/data-types/</guid>
      <description>library(tidyquant)library(dplyr)MVP, Part 1stock_prices&amp;lt;-c(23,27,23,21,34,24,25,30,37,30)day_of_week&amp;lt;-rep(c(&amp;quot;Monday&amp;quot;,&amp;quot;Tuesday&amp;quot;,&amp;quot;Wednesday&amp;quot;,&amp;quot;Thursday&amp;quot;,&amp;quot;Friday&amp;quot;),2)day_of_week_factor&amp;lt;-as.factor(day_of_week)named_stock_prices&amp;lt;-stock_pricesnames(named_stock_prices)&amp;lt;-day_of_weekstock_data&amp;lt;-data.frame(stock_prices,day_of_week)stock_list&amp;lt;-list(&amp;quot;Stock Prices&amp;quot;=stock_prices,&amp;quot;Day of Week&amp;quot;=day_of_week,&amp;quot;Data Frame&amp;quot;=stock_data)MVP, Part 2stock_prices[4]## [1] 21stock_prices[5]## [1] 34stock_prices[6]## [1] 24stock_prices[stock_prices&amp;gt;30]## [1] 34 37stock_data$day_of_week## [1] Monday Tuesday Wednesday Thursday Friday Monday Tuesday ## [8] Wednesday Thursday Friday ## Levels: Friday Monday Thursday Tuesday Wednesdaystock_data[stock_data$stock_prices&amp;gt;30,]## stock_prices day_of_week## 5 34 Friday## 9 37 Thursdaystock_data[,1]## [1] 23 27 23 21 34 24 25 30 37 30stock_data[3,]## stock_prices day_of_week## 3 23 Wednesdaystock_data[3,1]## [1] 23stock_list$`Data Frame`## stock_prices day_of_week## 1 23 Monday## 2 27 Tuesday## 3 23 Wednesday## 4 21 Thursday## 5 34 Friday## 6 24 Monday## 7 25 Tuesday## 8 30 Wednesday## 9 37 Thursday## 10 30 FridayExtension# help(package=&amp;quot;tidyquant&amp;quot;)aapl_stock_prices&amp;lt;-tq_get(&amp;quot;AAPL&amp;quot;, get=&amp;quot;stock.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>/about/</link>
      <pubDate>Thu, 05 May 2016 21:48:51 -0700</pubDate>
      
      <guid>/about/</guid>
      <description>This is a &amp;ldquo;hello world&amp;rdquo; example website for the blogdown package. The theme was forked from @jrutheiser/hugo-lithium-theme and modified by Yihui Xie.</description>
    </item>
    
    <item>
      <title></title>
      <link>/week-02/day-5/1-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/week-02/day-5/1-sql/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>/week-06/day-2/distributions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/week-06/day-2/distributions/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>